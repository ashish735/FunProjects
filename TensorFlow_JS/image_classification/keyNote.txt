In the above example, we used a pre-trained image classification model 
called MobileNet
    
We used ml5.js, a library built on top of TensorFlow.js, to load the 
MobileNet model into our browser and perform inference on the video feed
    
We also leveraged the P5.js library to process the video feed and display 
labels on the video itself

Now, the recommended approach to use TensorFlow.js is to load it directly by 
using the official URL of the library. You just have to add the following 
line to your HTML file:

<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.0/dist/tf.min.js">
</script>

TensorFlow.js is capable of building both machine learning and deep learning 
models in the browser. It also automatically takes advantage of the power of 
GPU(s), if available in your system during model training.

Examples built with tensorflow js
https://github.com/tensorflow/tfjs-examples

Examples of pretrained models
https://www.tensorflow.org/js/models

We will be using the ml5.js library in order to work with PoseNet. 
ml5.js is a library built on top of TensorFlow.js along with p5.js, 
another library that makes it easier to access the webcam in the browser.

ml5.js aims to make machine learning approachable for a broad audience of 
artists, creative coders, and students. The library provides access to machine 
learning algorithms and models in the browser with a simple syntax, 
building on top of TensorFlow.js.